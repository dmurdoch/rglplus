% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rgl.makemovie.R
\name{rgl.makemovie}
\alias{rgl.makemovie}
\title{Produce a movie from and 3d rgl scene}
\usage{
rgl.makemovie(
  frame = NULL,
  path = NULL,
  tmin = 0,
  tmax = 1,
  nframes = 60,
  fps = 60,
  output.path,
  output.filename,
  keep.frames = F,
  quiet = T,
  separator = .Platform$file.sep,
  ffmpeg.cmd = "ffmpeg",
  ffmpeg.opt = "-vcodec libx264 -crf 18 -pix_fmt yuv420p"
)
}
\arguments{
\item{frame}{optional function that plots or updates the 3D scene at a given time. This function must have exactly one argument, which specifies the time of the frame.}

\item{path}{optional list that specifies the motion of the camera at some discrete times. The list contains the following elements (for more details see \code{\link{rgl.camera}}):\cr\cr
\code{time} = optional n-vector of strictly monotonically increasing discrete times, required if and only if one of the following four arguments (position, direction, up, fov) are provided as matrices/vectors. If not given, equally spaced in times between tmin and tmax are assumed.\cr
\code{position} = optional argument specifying the camera position along the path. This argument must be one of three types: (1) A 3-element vector specifies a fixed camera position for the whole movie. (2) A n-by-3 matrix specifies n discrete camera positions at the exact times given in the \code{time} vector (see above). The code automatically generates a smooth function going through these n points. (3) A function f(t) of a single time variable t, which returns a 3-element vector, specifies the exact position at that time.\cr
\code{direction} = optional argument specifying the direction of the camera's optical axis. This argument can be of the same three types as the \code{position} argument.\cr
\code{up} = optional argument specifying the camera's up-direction. This argument can be of the same three types as the \code{position} argument.\cr
\code{fov} = optional argument specifying the field-of-view (FoV) in degrees. Similarly to the above arguments, this can be either a single number (fixed FoV), a n-element vector (specifying the Fov at the n discrete times), or a scalar function (specifying the FoV at any time t).\cr\cr}

\item{tmin}{physical time of first frame in the movie.}

\item{tmax}{physical time of last frame in the movie.}

\item{nframes}{number of frames in the movie. The time variable is sampled evenly between \code{tmin} and \code{tmax}.}

\item{fps}{number of frames per second}

\item{output.path}{character specifying the directory, where the movie and temporary frames are saved}

\item{output.filename}{movie filename without path. This filename should end on the extension '.mp4'.}

\item{keep.frames}{logical flag specifying whether the temporary directory with the individual frame files should be kept}

\item{quiet}{logical flag; if true, all console outputs produced by 'ffmpeg' are suppressed}

\item{separator}{filename separate of the system ('/' for Mac, Linux, Unix; '\' for Windows)}

\item{ffmpeg.cmd}{command used to call ffmpeg form a terminal. Normally, this is just 'ffmpeg'.}

\item{ffmpeg.opt}{optional arguments used with ffmpeg, such as compression and formatting options (see \url{https://www.ffmpeg.org/ffmpeg.html}).}
}
\description{
Generates an MP4-movie of a 3d rgl scene with time-dependent objects and/or a camera path. The routine has been developed and tested for MacOS and it requires on a working installation of ffmpeg.
}
\details{
Note that the frame width and height should be divisible by 2 for mp4 video compression to work.\cr
To accelerate the movie generation, it is possible to suppress the screen update by calling \code{\link{rgl.hold}} before calling \code{rgl.makemovie}.
}
\examples{

## Example: Movie of spaceship flying around the Earth chasing a UFO

\dontrun{
# Produce basic scene
rgl.new(width=720, aspect=4/3, col='black', xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1))
rgl::clear3d(type = "lights")
rgl::rgl.light(80,30,viewpoint.rel = FALSE)
rgl.ball(0, 0, 0, 1, png=system.file('earth.png', package='rglplus'), depth=7, emission='#444466')

# Make function to update frames
ptlast = NULL
frame = function(t) {
  rgl.hold()
  pt = c(1.01*cos(t+0.2),1.01*sin(t+0.2),sin(5*t)*0.02)
  if (!is.null(ptlast)) {
    rgl::pop3d()
    rgl::lines3d(rbind(ptlast,pt), col='red', lwd=3)
  }
  rgl.ball(pt[1], pt[2], pt[3], 0.003, col='orange', emission='#885500')
  ptlast <<- pt
  rgl.draw()
}

# Make path
path = list(position = function(t) c(1.1*cos(t),1.1*sin(t),0),
direction = function(t) c(-1.5*sin(t)-cos(t),1.5*cos(t)-sin(t),0),
up = function(t) c(cos(t),sin(t),sin(t)/2),
fov = 30)

# Produce movie
rgl.makemovie(frame=frame, path=path, tmin=0, tmax=2*pi, output.path='~/testmovie',
              output.filename = 'movie.mp4', ffmpeg.cmd = 'ffmpeg', nframes=600)
}

}
\author{
Danail Obreschkow
}
